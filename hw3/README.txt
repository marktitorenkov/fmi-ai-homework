Да се имплементира генетичен алгоритъм върху една от следните две задачи:

Задача 1 (TSP)

Да се реши задачата за търговския пътник (Traveling Salesman Problem) чрез използване на генетичен алгоритъм (ГА).

За целта на програмата се задават два възможни входа:

N - число (N <= 100) - брой точки в пространството (брой градове), които да бъдат генерирани произволно.
Името на набор от данни (напр. "UK12") - за работа с предварително дефиниран набор от координати на градове и съответните имена на тези градове.
Съответно програмата работи в два режима:

1. Произволни точки
Ако е подадено число N, програмата генерира N точки от двумерна координатна система на случаен принцип.
Търси се най-къс път, който минава през всяка точка само по веднъж.
Програмата извежда:
Дължината на текущо най-добрия път в популацията в 10 поколения (генерации):
- 1-ва генерация.
- поне 8 междинни генерации (важното е да се вижда как алгоритъмът оптимизира).
- последната генерация.
Празен ред.
Координатите на точките от най-добрия път в последната генерация.
Дължината на този път.
2. Предварително зададен набор от данни
Ако е подадено името на набор от данни (напр. "UK12"), програмата зарежда този набор с предварително дефинирани имена и координати на градове.
Търси се най-къс път, който минава през всяка точка (дефинираните градове) само по веднъж.
Програмата извежда:
Дължината на текущо най-добрия път в популацията в 10 поколения (генерации):
- 1-ва генерация.
- поне 8 междинни генерации (важното е да се вижда как алгоритъмът оптимизира).
- последната генерация.
Празен ред.
Имената на градовете от най-добрия път в последната генерация.
Дължината на този път.
* За примерен набор от данни на градове с предварително дефинирани имена и координати можете да използвате файиловете "uk12_name.csv" и "uk12_ xy.csv" от архива "UK_TSP.zip". Очаква се вашето решение да може да достига до оптималното решение (1595.738522033024) почти винаги за дадените градове (по принцип ГА не гарантира откриването на оптимално решение, но за тези данни при необходимите настройки следва почти винаги да достига до него).
** Очаква се вашето решение да се изпълнява бързо - в рамките на няколко секунди с принтирането на съответния изход.
Вход:

N или "име_на_набор_от_данни"

Изход:

Дължината на най-късия път за първата популация.
Дължината на най-късия път за междинна популация (поне 8 популации).
Дължината на най-късия път за последната популация.

Имената на градовете или координатите на точките за най-добрия маршрут от последната популация.
Дължината на най-късия път за последната популация.



Примерен вход:

UK

Примерен изход:

5252
3544
2800
2378
2029
1811
1632
1632
1595
1595

Aberystwyth -> Inverness -> Nottingham -> Glasgow -> Edinburgh -> London -> Stratford -> Exeter -> Liverpool -> Oxford -> Brighton -> Newcastle
1595




Задача 2 (KP)

Дадена е раница с вместимост M килограма и N предмета, всеки от които се характеризира с две числа - тегло mi и стойност ci. Използвайки Генетичен алгоритъм, да се избере такова множество от предмети, чиято сумарна стойност е максимална, а сумата от теглата не надвишава M. За целта нека да се изведе на поне десет стъпки стойността на текущо най-добрата конфигурация от предмети в популацията.

На 1-та генерация.
Поне 8 междинни генерации по избор (важното е да се вижда как алгоритъмът оптимизира).
Последната генерация.
* N < 10 000

** Решението трябва да може да работи и с данните в прикачения архив "KP.zip". Очаква се да може да достига до оптималното решение почти винаги за дадените предмети (по принцип ГА не гарантира откриването на оптимално решение, но за тези данни при необходимите настройки следва почти винаги да достига до него).

*** Очаква се вашето решение да се изпълнява бързо - в рамките на няколко секунди с принтирането на съответния изход.

Вход:

M, N

N реда определящи mi и ci

Изход:

Максималната възможна такава сума от стойности



Примерен вход:

5 3

3 2

1 5

2 3

Примерен изход:

5

7

8

8

8

* Забележка: Като използвате за тестови данни тези във файлoвете "KP short test data.txt" и "KP long test data.txt" от прикачения архив "KP.zip", имайте предвид, че първият ред от данните показва максималната вместимост на раницата и броят на предметите (съответно "5000 грама и 24 предмета" и "5000 грама и 200 предмета"). Оптималните раници за двата набора от данни са съответно 1130 и 5119.


* Имайте предвид, че която и задача да изберете, тя трябва да работи в рамките на секунди (или поне най-много 1-2 секунда на генерация) и за предложените данни почти винаги да открива оптималното решение. Можете да изберете дори и задачата с N-те царици, но и за нея са подобни очакванията. Също така за нея ще очаквам и съпоставяне с решението от предишната домашна.
** Относно инструментът за тестване и допълнителна информация за съответните изисквания от към изход в конзолата (които не се очаква да са по различни от тези) ще се дадат в последствие.
